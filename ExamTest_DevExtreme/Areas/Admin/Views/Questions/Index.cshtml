@using Exam_Test.Models
@model List<Question>
<h2>Questions</h2>
<br /><br />
@(Html.DevExtreme().DataGrid<Exam_Test.Models.Question>()

    .ID("gridContainer")
    .ShowBorders(true)
    .Paging(paging => paging.Enabled(false))
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Form);
        editing.AllowAdding(true);
        editing.AllowDeleting(true);
        editing.AllowUpdating(true);
    })
    .Columns(columns =>
    {
        columns.AddFor(m => m.questionStr)
        .Visible(true)
        .FormItem(i => i
            .Editor(e=>e
                .TextArea()
                .Height(100)
            )
            .ColSpan(2)
        )
    ;

        columns.AddFor(m => m.sectionId)
            .Lookup(Lookup => Lookup
                .DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetSections").Key("sectionId"))
                .DisplayExpr("name")
                .ValueExpr("sectionId")
            )
            .FormItem(i => i
                .Editor(e => e
                    .DropDownBox()
                       .ValueExpr("sectionId")
                       .DisplayExpr("name")
                       .DropDownOptions(o => o.Height(300))
                       .DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetSections")
                            .UpdateAction("Put")
                            .InsertAction("Post")
                            .DeleteAction("Delete").Key("sectionId")
                       )
                       .Placeholder("Select a value...")
                       .ShowClearButton(true)
                       .OnValueChanged("treeBox_valueChanged")
                       .ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
                    )
            )
        ;

        columns.AddFor(m => m.hint)
        .Visible(true)
        .FormItem(i => i
            .Editor(e => e
                .TextArea()
                .Height(100)
            )
            .ColSpan(2)
        )
        ;


        columns.AddFor(m => m.type)
                .Lookup(lookup => lookup
                    .DataSource(Html.GetEnumSelectList<QuestionType>()
                        .Select(l => new { Value = int.Parse(l.Value), Text = l.Text })
                    )
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
        );


    })
    .DataSource(d => d.Mvc()
        .Area("Admin")
        .Controller("Questions")
        .LoadAction("GetQuestions")
        .UpdateAction("Put")
        .InsertAction("Post")
        .DeleteAction("Delete")
        .Key("questionId")

    )
)


@using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
{
    @(Html.DevExtreme().TreeView()
        .DataSource(d => d.Mvc().Controller("Sections").Key("sectionId")
            .LoadAction("GetSections")
            .UpdateAction("Put")
            .InsertAction("Post")
            .DeleteAction("Delete").Key("sectionId")
        )
        .KeyExpr("sectionId")
        .DisplayExpr("name")
        .ItemsExpr("name")
        .ParentIdExpr("parentId")
        .DataStructure(TreeViewDataStructure.Plain)
        .SelectionMode(NavSelectionMode.Single)
        .SelectByClick(true)
        .Height(235)
        .OnItemSelectionChanged(@<text>
                    function(args) {
                    var nodes = args.component.getNodes(),
                    value = getSelectedItemsKeys(nodes);

                    component.option("value", value);
                    }
        </text>)
        .OnContentReady(@<text>
            function(args) {
            syncTreeViewSelection(args.component, component.option("value"));
            }
        </text>)
    )
}

<script>
    function logEvent(eventName) {
        var logList = $("#events ul"),
            newItem = $("<li>", { text: eventName });

        logList.prepend(newItem);
    }

function getFormInstance() {
        return $("#form").dxForm("instance");
    }

    function selectBox_valueChanged(data) {
        getFormInstance().option("formData", data.value);
    }

    function labelLocation_changed(data) {
        getFormInstance().option("labelLocation", data.value);
    }

    function colCount_changed(data) {
        getFormInstance().option("colCount", data.value);
    }

    function minColWidth_changed(data) {
        getFormInstance().option("minColWidth", data.value);
    }

    function formWidth_changed(data) {
        getFormInstance().option("width", data.value);
    }

    function readOnly_changed(data) {
        getFormInstance().option("readOnly", data.value);
    }

    function showColonAfterLabel_changed(data) {
        getFormInstance().option("showColonAfterLabel", data.value);
    }


    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function getSelectedItemsKeys(items) {
        var result = [];
        items.forEach(function (item) {
            if (item.selected) {
                result.push(item.key);
            }
            if (item.items.length) {
                result = result.concat(getSelectedItemsKeys(item.items));
            }
        });
        return result;
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    //form
    function getFormInstance() {
        return $("#form").dxForm("instance");
    }
</script>


